def is_safe(board, row, col, n):
    for i in range(row):
        if board[i][col] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j] == 1:
            return False
    return True
def solve_n_queens(board, row, n):
    if row >= n:
        return True
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1 
            if solve_n_queens(board, row + 1, n):
                return True
            board[row][col] = 0 
    return False
def n_queens(n):
    board = [[0] * n for _ in range(n)]
    if solve_n_queens(board, 0, n):
        for i, row in enumerate(board):
            for j, col in enumerate(row):
                if (i + j) % 2 == 0:
                    print('â¬›' if col == 0 else 'ðŸ‘‘', end="")
                else:
                    print('â¬œ' if col == 0 else 'ðŸ‘‘', end="")
            print() 
    else:
        print("No solution exists.")
n_queens(8) 
